// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main/proto/com/palantir/atlasdb/protos/SchemaMetadataPersistence.proto

package com.palantir.atlasdb.protos.generated;

public final class SchemaMetadataPersistence {
  private SchemaMetadataPersistence() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.palantir.atlasdb.protos.generated.CleanupRequirement}
   */
  public enum CleanupRequirement
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NOT_NEEDED = 0;</code>
     *
     * <pre>
     * Used for tables without cleanup tasks.
     * </pre>
     */
    NOT_NEEDED(0, 0),
    /**
     * <code>STREAM_STORE = 1;</code>
     *
     * <pre>
     * Used for stream store meta-tables which don't also have user-defined cleanup tasks.
     * </pre>
     */
    STREAM_STORE(1, 1),
    /**
     * <code>ARBITRARY_ASYNC = 2;</code>
     *
     * <pre>
     * Used for tables (possibly inclusive of stream-store meta-tables) that have user-defined cleanup tasks
     * which can safely be processed asynchronously (e.g. via a queue).
     * Examples include cascading deletes and reads from append-only Atlas tables.
     * </pre>
     */
    ARBITRARY_ASYNC(2, 2),
    /**
     * <code>ARBITRARY_SYNC = 3;</code>
     *
     * <pre>
     * Used for tables (possibly inclusive of stream-store meta-tables) that have user-defined cleanup tasks
     * that must be processed before cells are actually swept.
     * Examples include tasks that read other Atlas tables or make RPCs to other services (in the general case).
     * </pre>
     */
    ARBITRARY_SYNC(3, 3),
    ;

    /**
     * <code>NOT_NEEDED = 0;</code>
     *
     * <pre>
     * Used for tables without cleanup tasks.
     * </pre>
     */
    public static final int NOT_NEEDED_VALUE = 0;
    /**
     * <code>STREAM_STORE = 1;</code>
     *
     * <pre>
     * Used for stream store meta-tables which don't also have user-defined cleanup tasks.
     * </pre>
     */
    public static final int STREAM_STORE_VALUE = 1;
    /**
     * <code>ARBITRARY_ASYNC = 2;</code>
     *
     * <pre>
     * Used for tables (possibly inclusive of stream-store meta-tables) that have user-defined cleanup tasks
     * which can safely be processed asynchronously (e.g. via a queue).
     * Examples include cascading deletes and reads from append-only Atlas tables.
     * </pre>
     */
    public static final int ARBITRARY_ASYNC_VALUE = 2;
    /**
     * <code>ARBITRARY_SYNC = 3;</code>
     *
     * <pre>
     * Used for tables (possibly inclusive of stream-store meta-tables) that have user-defined cleanup tasks
     * that must be processed before cells are actually swept.
     * Examples include tasks that read other Atlas tables or make RPCs to other services (in the general case).
     * </pre>
     */
    public static final int ARBITRARY_SYNC_VALUE = 3;


    public final int getNumber() { return value; }

    public static CleanupRequirement valueOf(int value) {
      switch (value) {
        case 0: return NOT_NEEDED;
        case 1: return STREAM_STORE;
        case 2: return ARBITRARY_ASYNC;
        case 3: return ARBITRARY_SYNC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CleanupRequirement>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CleanupRequirement>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CleanupRequirement>() {
            public CleanupRequirement findValueByNumber(int number) {
              return CleanupRequirement.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.getDescriptor().getEnumTypes().get(0);
    }

    private static final CleanupRequirement[] VALUES = values();

    public static CleanupRequirement valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CleanupRequirement(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.palantir.atlasdb.protos.generated.CleanupRequirement)
  }

  public interface SchemaMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.palantir.atlasdb.protos.generated.SchemaMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    java.util.List<com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata> 
        getTableMetadataList();
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata getTableMetadata(int index);
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    int getTableMetadataCount();
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    java.util.List<? extends com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder> 
        getTableMetadataOrBuilderList();
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder getTableMetadataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.palantir.atlasdb.protos.generated.SchemaMetadata}
   */
  public static final class SchemaMetadata extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.palantir.atlasdb.protos.generated.SchemaMetadata)
      SchemaMetadataOrBuilder {
    // Use SchemaMetadata.newBuilder() to construct.
    private SchemaMetadata(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SchemaMetadata(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SchemaMetadata defaultInstance;
    public static SchemaMetadata getDefaultInstance() {
      return defaultInstance;
    }

    public SchemaMetadata getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SchemaMetadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                tableMetadata_ = new java.util.ArrayList<com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata>();
                mutable_bitField0_ |= 0x00000001;
              }
              tableMetadata_.add(input.readMessage(com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          tableMetadata_ = java.util.Collections.unmodifiableList(tableMetadata_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata.class, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata.Builder.class);
    }

    public static com.google.protobuf.Parser<SchemaMetadata> PARSER =
        new com.google.protobuf.AbstractParser<SchemaMetadata>() {
      public SchemaMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SchemaMetadata(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SchemaMetadata> getParserForType() {
      return PARSER;
    }

    public static final int TABLEMETADATA_FIELD_NUMBER = 1;
    private java.util.List<com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata> tableMetadata_;
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    public java.util.List<com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata> getTableMetadataList() {
      return tableMetadata_;
    }
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    public java.util.List<? extends com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder> 
        getTableMetadataOrBuilderList() {
      return tableMetadata_;
    }
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    public int getTableMetadataCount() {
      return tableMetadata_.size();
    }
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata getTableMetadata(int index) {
      return tableMetadata_.get(index);
    }
    /**
     * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
     *
     * <pre>
     * Using this rather than map, to avoid introducing a dependency on proto3
     * TODO (jkong): Eventually coordinate a shift to proto3
     * </pre>
     */
    public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder getTableMetadataOrBuilder(
        int index) {
      return tableMetadata_.get(index);
    }

    private void initFields() {
      tableMetadata_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < tableMetadata_.size(); i++) {
        output.writeMessage(1, tableMetadata_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < tableMetadata_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, tableMetadata_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.palantir.atlasdb.protos.generated.SchemaMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.palantir.atlasdb.protos.generated.SchemaMetadata)
        com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata.class, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata.Builder.class);
      }

      // Construct using com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTableMetadataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (tableMetadataBuilder_ == null) {
          tableMetadata_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          tableMetadataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_descriptor;
      }

      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata getDefaultInstanceForType() {
        return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata.getDefaultInstance();
      }

      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata build() {
        com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata buildPartial() {
        com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata result = new com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata(this);
        int from_bitField0_ = bitField0_;
        if (tableMetadataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            tableMetadata_ = java.util.Collections.unmodifiableList(tableMetadata_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.tableMetadata_ = tableMetadata_;
        } else {
          result.tableMetadata_ = tableMetadataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata) {
          return mergeFrom((com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata other) {
        if (other == com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata.getDefaultInstance()) return this;
        if (tableMetadataBuilder_ == null) {
          if (!other.tableMetadata_.isEmpty()) {
            if (tableMetadata_.isEmpty()) {
              tableMetadata_ = other.tableMetadata_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTableMetadataIsMutable();
              tableMetadata_.addAll(other.tableMetadata_);
            }
            onChanged();
          }
        } else {
          if (!other.tableMetadata_.isEmpty()) {
            if (tableMetadataBuilder_.isEmpty()) {
              tableMetadataBuilder_.dispose();
              tableMetadataBuilder_ = null;
              tableMetadata_ = other.tableMetadata_;
              bitField0_ = (bitField0_ & ~0x00000001);
              tableMetadataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTableMetadataFieldBuilder() : null;
            } else {
              tableMetadataBuilder_.addAllMessages(other.tableMetadata_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaMetadata) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata> tableMetadata_ =
        java.util.Collections.emptyList();
      private void ensureTableMetadataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          tableMetadata_ = new java.util.ArrayList<com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata>(tableMetadata_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder> tableMetadataBuilder_;

      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public java.util.List<com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata> getTableMetadataList() {
        if (tableMetadataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tableMetadata_);
        } else {
          return tableMetadataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public int getTableMetadataCount() {
        if (tableMetadataBuilder_ == null) {
          return tableMetadata_.size();
        } else {
          return tableMetadataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata getTableMetadata(int index) {
        if (tableMetadataBuilder_ == null) {
          return tableMetadata_.get(index);
        } else {
          return tableMetadataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder setTableMetadata(
          int index, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata value) {
        if (tableMetadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTableMetadataIsMutable();
          tableMetadata_.set(index, value);
          onChanged();
        } else {
          tableMetadataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder setTableMetadata(
          int index, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder builderForValue) {
        if (tableMetadataBuilder_ == null) {
          ensureTableMetadataIsMutable();
          tableMetadata_.set(index, builderForValue.build());
          onChanged();
        } else {
          tableMetadataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder addTableMetadata(com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata value) {
        if (tableMetadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTableMetadataIsMutable();
          tableMetadata_.add(value);
          onChanged();
        } else {
          tableMetadataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder addTableMetadata(
          int index, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata value) {
        if (tableMetadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTableMetadataIsMutable();
          tableMetadata_.add(index, value);
          onChanged();
        } else {
          tableMetadataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder addTableMetadata(
          com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder builderForValue) {
        if (tableMetadataBuilder_ == null) {
          ensureTableMetadataIsMutable();
          tableMetadata_.add(builderForValue.build());
          onChanged();
        } else {
          tableMetadataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder addTableMetadata(
          int index, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder builderForValue) {
        if (tableMetadataBuilder_ == null) {
          ensureTableMetadataIsMutable();
          tableMetadata_.add(index, builderForValue.build());
          onChanged();
        } else {
          tableMetadataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder addAllTableMetadata(
          java.lang.Iterable<? extends com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata> values) {
        if (tableMetadataBuilder_ == null) {
          ensureTableMetadataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tableMetadata_);
          onChanged();
        } else {
          tableMetadataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder clearTableMetadata() {
        if (tableMetadataBuilder_ == null) {
          tableMetadata_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          tableMetadataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public Builder removeTableMetadata(int index) {
        if (tableMetadataBuilder_ == null) {
          ensureTableMetadataIsMutable();
          tableMetadata_.remove(index);
          onChanged();
        } else {
          tableMetadataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder getTableMetadataBuilder(
          int index) {
        return getTableMetadataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder getTableMetadataOrBuilder(
          int index) {
        if (tableMetadataBuilder_ == null) {
          return tableMetadata_.get(index);  } else {
          return tableMetadataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public java.util.List<? extends com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder> 
           getTableMetadataOrBuilderList() {
        if (tableMetadataBuilder_ != null) {
          return tableMetadataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tableMetadata_);
        }
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder addTableMetadataBuilder() {
        return getTableMetadataFieldBuilder().addBuilder(
            com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.getDefaultInstance());
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder addTableMetadataBuilder(
          int index) {
        return getTableMetadataFieldBuilder().addBuilder(
            index, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.getDefaultInstance());
      }
      /**
       * <code>repeated .com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata tableMetadata = 1;</code>
       *
       * <pre>
       * Using this rather than map, to avoid introducing a dependency on proto3
       * TODO (jkong): Eventually coordinate a shift to proto3
       * </pre>
       */
      public java.util.List<com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder> 
           getTableMetadataBuilderList() {
        return getTableMetadataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder> 
          getTableMetadataFieldBuilder() {
        if (tableMetadataBuilder_ == null) {
          tableMetadataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder>(
                  tableMetadata_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          tableMetadata_ = null;
        }
        return tableMetadataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.palantir.atlasdb.protos.generated.SchemaMetadata)
    }

    static {
      defaultInstance = new SchemaMetadata(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.palantir.atlasdb.protos.generated.SchemaMetadata)
  }

  public interface SchemaDependentTableMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .com.palantir.atlasdb.protos.generated.CleanupRequirement cleanupRequirement = 1;</code>
     */
    boolean hasCleanupRequirement();
    /**
     * <code>optional .com.palantir.atlasdb.protos.generated.CleanupRequirement cleanupRequirement = 1;</code>
     */
    com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement getCleanupRequirement();
  }
  /**
   * Protobuf type {@code com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata}
   */
  public static final class SchemaDependentTableMetadata extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata)
      SchemaDependentTableMetadataOrBuilder {
    // Use SchemaDependentTableMetadata.newBuilder() to construct.
    private SchemaDependentTableMetadata(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SchemaDependentTableMetadata(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SchemaDependentTableMetadata defaultInstance;
    public static SchemaDependentTableMetadata getDefaultInstance() {
      return defaultInstance;
    }

    public SchemaDependentTableMetadata getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SchemaDependentTableMetadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement value = com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                cleanupRequirement_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.class, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder.class);
    }

    public static com.google.protobuf.Parser<SchemaDependentTableMetadata> PARSER =
        new com.google.protobuf.AbstractParser<SchemaDependentTableMetadata>() {
      public SchemaDependentTableMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SchemaDependentTableMetadata(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SchemaDependentTableMetadata> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CLEANUPREQUIREMENT_FIELD_NUMBER = 1;
    private com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement cleanupRequirement_;
    /**
     * <code>optional .com.palantir.atlasdb.protos.generated.CleanupRequirement cleanupRequirement = 1;</code>
     */
    public boolean hasCleanupRequirement() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .com.palantir.atlasdb.protos.generated.CleanupRequirement cleanupRequirement = 1;</code>
     */
    public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement getCleanupRequirement() {
      return cleanupRequirement_;
    }

    private void initFields() {
      cleanupRequirement_ = com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement.NOT_NEEDED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, cleanupRequirement_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, cleanupRequirement_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata)
        com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.class, com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.Builder.class);
      }

      // Construct using com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cleanupRequirement_ = com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement.NOT_NEEDED;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_descriptor;
      }

      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata getDefaultInstanceForType() {
        return com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.getDefaultInstance();
      }

      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata build() {
        com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata buildPartial() {
        com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata result = new com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cleanupRequirement_ = cleanupRequirement_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata) {
          return mergeFrom((com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata other) {
        if (other == com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata.getDefaultInstance()) return this;
        if (other.hasCleanupRequirement()) {
          setCleanupRequirement(other.getCleanupRequirement());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.SchemaDependentTableMetadata) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement cleanupRequirement_ = com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement.NOT_NEEDED;
      /**
       * <code>optional .com.palantir.atlasdb.protos.generated.CleanupRequirement cleanupRequirement = 1;</code>
       */
      public boolean hasCleanupRequirement() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.palantir.atlasdb.protos.generated.CleanupRequirement cleanupRequirement = 1;</code>
       */
      public com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement getCleanupRequirement() {
        return cleanupRequirement_;
      }
      /**
       * <code>optional .com.palantir.atlasdb.protos.generated.CleanupRequirement cleanupRequirement = 1;</code>
       */
      public Builder setCleanupRequirement(com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        cleanupRequirement_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.palantir.atlasdb.protos.generated.CleanupRequirement cleanupRequirement = 1;</code>
       */
      public Builder clearCleanupRequirement() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cleanupRequirement_ = com.palantir.atlasdb.protos.generated.SchemaMetadataPersistence.CleanupRequirement.NOT_NEEDED;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata)
    }

    static {
      defaultInstance = new SchemaDependentTableMetadata(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.palantir.atlasdb.protos.generated.SchemaDependentTableMetadata)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nYatlasdb-client/src/main/proto/com/pala" +
      "ntir/atlasdb/protos/SchemaMetadataPersis" +
      "tence.proto\022%com.palantir.atlasdb.protos" +
      ".generated\"l\n\016SchemaMetadata\022Z\n\rtableMet" +
      "adata\030\001 \003(\0132C.com.palantir.atlasdb.proto" +
      "s.generated.SchemaDependentTableMetadata" +
      "\"u\n\034SchemaDependentTableMetadata\022U\n\022clea" +
      "nupRequirement\030\001 \001(\01629.com.palantir.atla" +
      "sdb.protos.generated.CleanupRequirement*" +
      "_\n\022CleanupRequirement\022\016\n\nNOT_NEEDED\020\000\022\020\n",
      "\014STREAM_STORE\020\001\022\023\n\017ARBITRARY_ASYNC\020\002\022\022\n\016" +
      "ARBITRARY_SYNC\020\003"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_palantir_atlasdb_protos_generated_SchemaMetadata_descriptor,
        new java.lang.String[] { "TableMetadata", });
    internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_palantir_atlasdb_protos_generated_SchemaDependentTableMetadata_descriptor,
        new java.lang.String[] { "CleanupRequirement", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
